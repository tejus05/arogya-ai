// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? 
  access_token       String? 
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? 
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
 
  @@map("users")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Profile {
  id       String @id @default(uuid())
  userId   String @unique
  name     String
  imageUrl String @db.String() //@db.Text for MySQL [decorator]
  email    String @db.String()

  servers Server[]
  members Member[]
  channel Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id         String @id @default(uuid())
  name       String
  imageUrl   String @db.String()
  inviteCode String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members  Member[]
  channels Channel[]

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(GUEST)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String

  messages Message[]

  directMessages DirectMessage[]

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived Conversation[] @relation("MemberTwo")

  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId String
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id   String      @id @default(uuid())
  type ChannelType @default(TEXT)
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String

  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId String

  messages Message[]
}

model Message {
  id      String @id @default(uuid())
  content String @db.String()

  fileUrl String? @db.String()

  member    Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId  String

  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId String

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Conversation{
  id String @id @default(uuid())

  memberOneId String
  memberOne Member @relation("MemberOne",fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String
  memberTwo Member @relation("MemberTwo",fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@unique([memberOneId,memberTwoId]) //composite unique constraint
}

model DirectMessage{
  id String @id @default(uuid())
  content String @db.String()
  fileUrl String? @db.String()

  memberId String
  member Member @relation(fields: [memberId],references: [id],onDelete: Cascade)

  conversationId String
  conversation Conversation @relation(fields: [conversationId],references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}